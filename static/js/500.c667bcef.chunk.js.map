{"version":3,"file":"static/js/500.c667bcef.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/EditContactModal/EditContactModal.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/ContactsPage.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const selectFilter = state => state.filter;\nexport const selectContacts = state => state.contacts.items;","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/Contacts/contactsOperations'; \nimport './ContactsForm.css'; \nimport { selectContacts } from 'redux/selectors';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [formData, setFormData] = useState({\n    name: '',\n    number: '',\n  });\n\n  const formatPhoneNumber = (phoneNumber) => {\n    const cleaned = phoneNumber.replace(/\\D/g, '');\n    const formatted = cleaned.substring(0, 10);\n    const regex = /^(\\d{3})(\\d{3})(\\d{4})$/;\n    const formattedNumber = formatted.replace(regex, '$1-$2-$3');\n    return formattedNumber;\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    if (name === 'number') {\n      const formattedPhone = formatPhoneNumber(value);\n      setFormData({ ...formData, [name]: formattedPhone });\n    } else {\n      setFormData({ ...formData, [name]: value });\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const { name, number } = formData;\n    const digitsCount = number.replace(/\\D/g, '').length;\n\n    if (name.trim() === '' || number.trim() === '') {\n      alert('Please fill in all fields');\n      return;\n    }\n\n    if (digitsCount < 10) {\n      alert('Phone number must contain at least 10 digits');\n      return;\n    }\n\n    if (contacts.some((contact) => contact.name === name)) {\n      alert(`${name} is already in your contacts`);\n      return;\n    }\n\n    dispatch(\n      addContact({\n        id: nanoid(),\n        name,\n        number,\n      })\n    );\n\n    setFormData({ name: '', number: '' });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form-container\">\n      <h3>Name</h3>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zAZа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={formData.name}\n        onChange={handleChange}\n        className=\"input-field\"\n      />\n      <h3>Number</h3>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +. Minimum 10 digits required.\"\n        required\n        value={formData.number}\n        onChange={handleChange}\n        className=\"input-field\"\n      />\n      <button type=\"submit\" className=\"add-contact-button\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import React, { useEffect, useState } from 'react';\nimport './StylesEditContactModal.css';\nimport { updateContact } from 'redux/Contacts/contactsOperations';\nimport { useDispatch } from 'react-redux';\n\nconst EditContactModal = ({ contact, onClose, onUpdate }) => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n\n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, []);\n\n  const handleNameChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    setNumber(e.target.value);\n  };\n\n  const handleUpdateClick = () => {\n    dispatch(\n      updateContact({\n        id: contact.id,\n        name,\n        number,\n      })\n    )\n      .then(() => {\n        onUpdate();\n      })\n      .catch((error) => {\n        // Обработка ошибки\n      });\n    onClose();\n  };\n\n  const handleCloseClick = () => {\n    onClose();\n  };\n\n  const handleEscapeKey = (e) => {\n    if (e.key === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleModalClick = (e) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleEscapeKey);\n    return () => {\n      window.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, );\n\n  return (\n    <div className=\"modal\" onClick={handleModalClick}>\n      <div className=\"modal-content\">\n        <span className=\"close-button\" onClick={handleCloseClick}>\n          X\n        </span>\n        <h2>Edit Contact</h2>\n        <input type=\"text\" value={name} onChange={handleNameChange} placeholder=\"Name\" />\n        <input type=\"text\" value={number} onChange={handleNumberChange} placeholder=\"Number\" />\n        <button onClick={handleUpdateClick}>Update contact</button>\n      </div>\n    </div>\n  );\n};\n\nexport default EditContactModal;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts, deleteContact, updateContact } from 'redux/Contacts/contactsOperations';\nimport '../ContactForm/ContactForm'; \nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport EditContactModal from '../EditContactModal/EditContactModal'\n\nconst ContactList = () => {\n  const [selectedContact, setSelectedContact] = useState(null);\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const updateContactList = () => {\n  dispatch(fetchContacts()); \n};\n\n\n  const filteredContacts = contacts\n    ? contacts.filter((contact) =>\n        contact.name.toLowerCase().includes(filter ? filter.toLowerCase() : \"\")\n      )\n    : [];\n  \n  const handleEditClick = (contact) => {\n    setSelectedContact(contact);\n  };\n\n  return (\n    <div>\n    <ul className=\"contacts-list\">\n      {filteredContacts.map((contact) => (\n        <li key={contact.id} className=\"contact-card\">\n          <p className=\"contact-name\">\n            <strong>Name:</strong> {contact.name}, <br />\n          </p>\n          <p className=\"contact-phone\">\n            <strong>Number:</strong> {contact.number}\n          </p>\n          <div className=\"button-container\">\n            <button onClick={() => handleEditClick(contact)} className=\"edit-button\"> Edit </button>\n            <button onClick={() => dispatch(deleteContact(contact.id))} className=\"delete-button\"> Delete </button>\n          </div>\n        </li>\n      ))}\n    </ul>\n  {selectedContact && (\n  <EditContactModal\n    contact={selectedContact}\n    onUpdate={updateContact}\n    onClose={() => {\n      setSelectedContact(null);\n      updateContactList(); \n    }}\n  />\n)}\n \n   \n  </div> \n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateFilter } from '../../redux/filterSlice';\nimport '../ContactForm/ContactForm'; \nimport { selectFilter } from 'redux/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = (e) => {\n    dispatch(updateFilter(e.target.value));\n  };\n\n  return (\n    <div className=\"form-container\">\n      <label>\n        Find contacts by name:\n        <input\n          type=\"text\"\n          value={filter}\n          onChange={handleFilterChange}\n          className=\"input-field\"\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport ContactForm from '../components/ContactForm/ContactForm.jsx';\nimport ContactList from '../components/ContactList/ContactList.jsx';\nimport Filter from '../components/Filter/Filter.jsx';\n\nimport '../components/ContactForm/ContactsForm.css';\n\nconst ContactsPage = () => {\n    return (\n        <div className=\"contacts-container\">\n            <h2 className=\"page-title\">Contacts</h2>\n            <ContactForm />\n            <h3 className=\"list-title\">Contacts list</h3>\n            <Filter />\n            <ContactList />\n        </div>\n    );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectFilter","state","filter","selectContacts","contacts","items","dispatch","useDispatch","useSelector","useState","name","number","formData","setFormData","handleChange","e","target","value","formattedPhone","replace","substring","onSubmit","preventDefault","digitsCount","length","trim","alert","some","contact","addContact","className","type","pattern","title","required","onChange","onClose","onUpdate","setName","setNumber","useEffect","document","body","style","overflow","handleEscapeKey","key","window","addEventListener","removeEventListener","onClick","currentTarget","placeholder","updateContact","then","catch","error","selectedContact","setSelectedContact","fetchContacts","filteredContacts","toLowerCase","includes","map","handleEditClick","deleteContact","updateFilter"],"sourceRoot":""}